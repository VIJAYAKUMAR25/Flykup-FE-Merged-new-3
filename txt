// import { useState, useRef, useEffect, useCallback } from "react"
// import Hls from 'hls.js'
// import { ChevronLeft, Send, ShoppingCart, X } from "lucide-react"
// import { motion, AnimatePresence } from "framer-motion"
// import { useNavigate, useParams } from "react-router-dom"
// import { BsVolumeMute, BsVolumeUp } from "react-icons/bs"
// import LikeButton from "../ui/LikeButton"
// import VideoInfoSection from "../ui/VideoInfoSection"
// import { LuMessageSquareText } from "react-icons/lu"
// import { FiShare } from "react-icons/fi"
// import { AiOutlineShop } from "react-icons/ai"
// import { LiaCommentSolid } from "react-icons/lia"
// import { GET_ALL_SHOPPABLE_VIDEOS } from "../../api/apiDetails"
// import axiosInstance from "../../../utils/axiosInstance"
// import ProductsDetailsPage from "./ProductDetails"
// import { toast } from "react-toastify"
// import { useAuth } from "../../../context/AuthContext"

// const ReelCard = ({
//   onWheel,
//   video,
//   onLike,
//   isActive,
//   onViewProducts,
//   showProducts,
//   currentProducts,
//   closeProductModal,
//   selectedProduct,
//   onSelectProduct,
// }) => {
//   const [liked, setLiked] = useState(false)
//   const [isPlaying, setIsPlaying] = useState(true)
//   const [isMuted, setIsMuted] = useState(false)
//   const [progress, setProgress] = useState(0)
//   const videoRef = useRef(null)
//   const [isLoading, setIsLoading] = useState(true)
//   const [showComments, setShowComments] = useState(false)
//   const [comments, setComments] = useState([])
//   const hlsRef = useRef(null);

//   useEffect(() => {
//     const videoElement = videoRef.current;
    
//     if (video?.hlsMasterPlaylistUrl && videoElement) {
//       if (Hls.isSupported()) {
//         if (hlsRef.current) {
//           hlsRef.current.destroy();
//         }
//         const hls = new Hls();
//         hlsRef.current = hls;

//         hls.loadSource(video.hlsMasterPlaylistUrl);
//         hls.attachMedia(videoElement);

//         hls.on(Hls.Events.MANIFEST_PARSED, () => {
//           if (isActive) {
//             videoElement.play().catch(() => {});
//           }
//         });
//       } else if (videoElement.canPlayType('application/vnd.apple.mpegurl')) {
//         videoElement.src = video.hlsMasterPlaylistUrl;
//       }
//     }

//     return () => {
//       if (hlsRef.current) {
//         hlsRef.current.destroy();
//         hlsRef.current = null;
//       }
//     };
//   }, [video?.hlsMasterPlaylistUrl, isActive]);


//   const handleLoadedData = () => {
//     setIsLoading(false)
//   }

//   const handleLike = () => {
//     setLiked(!liked)
//     // onLike(video?._id || video?.id);
//   }

//   const togglePlayPause = () => {
//     if (videoRef.current) {
//       if (isPlaying) {
//         videoRef.current.pause()
//         setIsPlaying(false)
//       } else {
//         videoRef.current.play()
//         setIsPlaying(true)
//       }
//     }
//   }

//   const handleMute = () => {
//     setIsMuted(!isMuted)
//     if (videoRef.current) {
//       videoRef.current.muted = !isMuted
//     }
//   }

//   const handleTimeUpdate = () => {
//     if (videoRef.current) {
//       const progressPercent = (videoRef.current.currentTime / videoRef.current.duration) * 100
//       setProgress(progressPercent)
//     }
//   }

//   const handleVideoEnd = () => {
//     setProgress(0)
//   }

//   const handleShare = async () => {
//     const shareUrl = `${window.location.origin}/profile/reel/${video._id}`

//     if (navigator.share) {
//       try {
//         await navigator.share({
//           title: "Check out this reel!",
//           text: "Hey, check out this amazing video reel!",
//           url: shareUrl,
//         })
//         console.log("Shared successfully")
//       } catch (error) {
//         console.error("Error sharing", error)
//       }
//     } else {
//       // Fallback: copy to clipboard
//       navigator.clipboard
//         .writeText(shareUrl)
//         .then(() => {
//           // Optionally, use your toast library for feedback:
//           toast.success("Link copied to clipboard!")
//         })
//         .catch((err) => console.error("Error copying link:", err))
//     }
//   }

//   // Prevent touch scroll when modals are open
//   useEffect(() => {
//     if (showProducts || showComments) {
//       // If modals are open, prevent touch scroll within the parent container
//       const container = document.querySelector(".pointer-events-auto.overflow-hidden")

//       const preventTouchScroll = (e) => {
//         e.stopPropagation()
//         // e.preventDefault();
//       }

//       if (container) {
//         container.addEventListener("touchstart", preventTouchScroll, { passive: false })
//         container.addEventListener("touchmove", preventTouchScroll, { passive: false })
//         container.addEventListener("touchend", preventTouchScroll, { passive: false })
//       }

//       return () => {
//         if (container) {
//           container.removeEventListener("touchstart", preventTouchScroll)
//           container.removeEventListener("touchmove", preventTouchScroll)
//           container.removeEventListener("touchend", preventTouchScroll)
//         }
//       }
//     }
//   }, [showProducts, showComments])

//   useEffect(() => {
//     const videoElement = videoRef.current
//     if (videoElement) {
//       if (isActive) {
//         videoElement.play().catch((error) => {
//           console.log("Autoplay was prevented:", error)
//         })
//         setIsPlaying(true)
//       } else {
//         videoElement.pause()
//         setIsPlaying(false)
//       }
//     }
//   }, [isActive, video?.hlsMasterPlaylistUrl, videoRef])

//   return (
//     <div className="fixed inset-0 flex justify-center bg-stone-950 items-center">
//       <div
//         className="relative w-full lg:max-w-[450px] lg:min-w-[100px] md:max-w-[250px] md:h-[90vh] h-[100vh] md:rounded-xl overflow-hidden shadow-2xl"
//         onWheel={(e) => onWheel(e)}
//       >
//         {/* Progress Bar */}
//         <div className="absolute top-0 left-0 right-0 z-20">
//           <div className="h-1 bg-stone-700/30 w-full relative overflow-hidden">
//             <div
//               className="absolute top-0 left-0 h-full bg-amber-500 transition-all duration-100 ease-linear"
//               style={{
//                 width: `${progress}%`,
//                 opacity: progress > 0 ? 1 : 0,
//               }}
//             ></div>
//           </div>
//         </div>

//         {/* Video with Play/Pause Overlay */}
//         <div className="relative w-full h-full" onClick={togglePlayPause}>
//         <video
//             ref={videoRef}
//             className="absolute inset-0 w-full h-full object-cover"
//             loop
//             muted={isMuted}
//             onTimeUpdate={handleTimeUpdate}
//             onEnded={handleVideoEnd}
//             onLoadedData={handleLoadedData}
//           />
//           {isLoading && (
//             <div className="absolute inset-0 w-full h-full flex items-center justify-center bg-stone-900/80 z-20">
//               <div className="w-12 h-12 rounded-full border-4 border-amber-500 border-t-transparent animate-spin"></div>
//             </div>
//           )}
//           {!isPlaying && (
//             <div className="absolute inset-0 flex items-center justify-center bg-stone-900/40 z-10 pointer-events-none backdrop-blur-sm">
//               <div className="w-20 h-20 rounded-full bg-amber-500/20 flex items-center justify-center backdrop-blur-sm">
//                 <svg
//                   xmlns="http://www.w3.org/2000/svg"
//                   width="40"
//                   height="40"
//                   viewBox="0 0 24 24"
//                   fill="none"
//                   stroke="currentColor"
//                   strokeWidth="2"
//                   strokeLinecap="round"
//                   strokeLinejoin="round"
//                   className="text-amber-500"
//                 >
//                   <polygon points="5 3 19 12 5 21 5 3"></polygon>
//                 </svg>
//               </div>
//             </div>
//           )}
//         </div>

//         <div className="absolute inset-0 bg-gradient-to-t from-stone-900/80 to-transparent pointer-events-none"></div>

//         <div className="absolute inset-0 flex flex-col justify-end text-white z-10 p-2 pointer-events-none">
//           <div className="absolute right-4 bottom-36 flex flex-col space-y-4 pointer-events-auto">
//             <div className="flex flex-col items-center">
//               <LikeButton initialLikes={video?.likes} onLike={handleLike} />
//             </div>
//             <button
//               className="w-12 h-12 rounded-full bg-stone-800/60 backdrop-blur-sm flex items-center justify-center text-white shadow-lg border border-stone-700/50 hover:bg-stone-700/80 transition-all duration-300"
//               onClick={() => setShowComments(true)}
//             >
//               <LiaCommentSolid className="h-6 w-6" />
//             </button>
//             <button
//               className="w-12 h-12 rounded-full bg-stone-800/60 backdrop-blur-sm flex items-center justify-center text-white shadow-lg border border-stone-700/50 hover:bg-stone-700/80 transition-all duration-300"
//               onClick={handleShare}
//             >
//               <FiShare className="h-5 w-5" />
//             </button>

//             <button
//               className="w-12 h-12 rounded-full bg-stone-800/60 backdrop-blur-sm flex items-center justify-center text-white shadow-lg border border-stone-700/50 hover:bg-stone-700/80 transition-all duration-300"
//               onClick={handleMute}
//             >
//               {isMuted ? <BsVolumeMute size={22} /> : <BsVolumeUp size={22} />}
//             </button>
//             <button
//               className="relative w-12 h-12 rounded-full bg-amber-500 flex items-center justify-center text-stone-900 shadow-lg hover:bg-amber-400 transition-all duration-300"
//               onClick={() => onViewProducts(video.productsListed)}
//             >
//               <AiOutlineShop className="w-6 h-6" />
//               <motion.span
//                 animate={{
//                   x: [0, -5, 5, -5, 5, 0],
//                   y: [0, -3, 3, -3, 3, 0],
//                   rotate: [0, 30, 0, 30, 0],
//                 }}
//                 transition={{
//                   x: {
//                     duration: 0.6,
//                     ease: "easeInOut",
//                     repeat: Number.POSITIVE_INFINITY,
//                     repeatType: "loop",
//                     repeatDelay: 1,
//                   },
//                   y: {
//                     duration: 0.6,
//                     ease: "easeInOut",
//                     repeat: Number.POSITIVE_INFINITY,
//                     repeatType: "loop",
//                     repeatDelay: 1,
//                   },
//                   rotate: {
//                     duration: 0.6,
//                     ease: [0.6, -0.05, 0.01, 0.99],
//                     repeat: Number.POSITIVE_INFINITY,
//                     repeatType: "loop",
//                     repeatDelay: 1,
//                   },
//                 }}
//                 className="absolute -top-1 -right-1 flex h-5 w-5 items-center justify-center rounded-full bg-stone-900 text-xs font-bold text-amber-500"
//               >
//                 {video?.productsListed?.length || 0}
//               </motion.span>
//             </button>
//           </div>

//           <div className="mb-4">
//             <VideoInfoSection video={video} onViewProducts={() => onViewProducts(video.productsListed)} />
//           </div>
//         </div>

//         <div className="absolute bottom-0 left-0 right-0 h-1/3 pointer-events-none">
//           <div className="h-full bg-gradient-to-t from-stone-900/90 via-stone-900/60 to-transparent"></div>
//         </div>
//       </div>

//       <div className="pointer-events-auto overflow-hidden">
//         <ProductModal
//           showProducts={showProducts}
//           currentProducts={currentProducts}
//           closeProductModal={closeProductModal}
//           onSelectProduct={onSelectProduct}
//           product={video}
//         />

//         <CommentsModal
//           showComments={showComments}
//           currentComments={comments}
//           closeCommentsModal={() => setShowComments(false)}
//           product={video}
//         />
//       </div>
//     </div>
//   )
// }

// const ProductModal = ({ showProducts, currentProducts, closeProductModal, onSelectProduct, product }) => {
//   const [cartItems, setCartItems] = useState([])

//   const addToCart = (product) => {
//     if (!cartItems.some((item) => item.id === product.id)) {
//       setCartItems([...cartItems, { ...product, quantity: 1 }])
//     }
//   }

//   const handleScroll = (e) => {
//     e.stopPropagation()
//   }

//   return (
//     <AnimatePresence>
//       {showProducts && (
//         <motion.div
//           initial={{ opacity: 0, y: "25%" }}
//           animate={{
//             opacity: 1,
//             y: 0,
//             transition: {
//               type: "spring",
//               damping: 15,
//               stiffness: 150,
//             },
//           }}
//           exit={{
//             opacity: 0,
//             y: "100%",
//             transition: { duration: 0.3 },
//           }}
//           className="fixed inset-0 z-50 flex items-end justify-center"
//         >
//           <div
//             className="bg-stone-900 w-full lg:max-w-[450px] lg:min-w-[100px] md:max-w-[250px] md:h-[90vh] h-[100vh] rounded-t-3xl shadow-2xl max-h-[80vh] overflow-none flex flex-col border border-stone-700/50"
//             style={{ scrollbarWidth: "none" }}
//             onWheel={(e) => handleScroll(e)}
//           >
//             <div className="px-6 py-5 flex justify-between items-center border-b border-stone-700/50">
//               <div className="flex items-center space-x-3">
//                 <ShoppingCart className="text-amber-500" size={18} />
//                 <h2 className="text-lg font-semibold text-white tracking-tight">Shop Now</h2>
//               </div>
//               <button
//                 onClick={closeProductModal}
//                 className="w-8 h-8 rounded-full bg-stone-800 flex items-center justify-center hover:bg-stone-700 transition-colors"
//               >
//                 <X size={16} className="text-white" />
//               </button>
//             </div>
//             <div className="flex flex-col space-y-4 overflow-y-auto" style={{ scrollbarWidth: "none" }}>
//               <ProductsDetailsPage products={product.productsListed} onClose={closeProductModal} />
//             </div>
//           </div>
//         </motion.div>
//       )}
//     </AnimatePresence>
//   )
// }

// const CommentsModal = ({ showComments, currentComments, closeCommentsModal }) => {
//   const [newComment, setNewComment] = useState("")
//   const [comments, setComments] = useState(currentComments || [])
//   const { user } = useAuth()

//   const handleAddComment = () => {
//     if (newComment.trim()) {
//       const commentToAdd = {
//         id: Date.now(),
//         user: {
//           name: user.name,
//           avatar: user.profileURL,
//         },
//         text: newComment,
//         timestamp: new Date().toISOString(),
//       }
//       setComments([...comments, commentToAdd])
//       setNewComment("")
//     }
//   }

//   return (
//     <AnimatePresence>
//       {showComments && (
//         <motion.div
//           initial={{ opacity: 0, y: "25%" }}
//           animate={{
//             opacity: 1,
//             y: 0,
//             transition: {
//               type: "spring",
//               damping: 15,
//               stiffness: 150,
//             },
//           }}
//           exit={{
//             opacity: 0,
//             y: "100%",
//             transition: { duration: 0.3 },
//           }}
//           className="fixed inset-0 z-50 flex items-end justify-center"
//         >
//           <div className="bg-stone-800 w-full max-w-md rounded-t-3xl shadow-2xl max-h-[80vh] overflow-hidden flex flex-col border border-stone-700/50">
//             <div className="px-6 py-5 flex justify-between items-center border-b border-stone-700/50">
//               <div className="flex items-center space-x-3">
//                 <LuMessageSquareText className="text-amber-500" size={20} />
//                 <h2 className="text-lg font-semibold text-white tracking-tight">Comments</h2>
//               </div>
//               <button
//                 onClick={closeCommentsModal}
//                 className="w-8 h-8 rounded-full bg-stone-700 flex items-center justify-center hover:bg-stone-600 transition-colors"
//               >
//                 <X size={16} className="text-white" />
//               </button>
//             </div>
//             <div className="px-6 py-4 flex-1 overflow-y-auto space-y-4" style={{ scrollbarWidth: "none" }}>
//               {comments.length === 0 ? (
//                 <div className="text-center text-stone-400 py-12 flex flex-col items-center">
//                   <LuMessageSquareText className="text-stone-500 mb-3" size={32} />
//                   <p>No comments yet. Be the first to comment!</p>
//                 </div>
//               ) : (
//                 comments.map((comment) => (
//                   <motion.div
//                     key={comment.id}
//                     initial={{ opacity: 0, x: -20 }}
//                     animate={{ opacity: 1, x: 0 }}
//                     transition={{ delay: 0.1 }}
//                     className="flex space-x-3 p-3 rounded-2xl bg-stone-700/30"
//                   >
//                     <img
//                       src={comment.user.avatar || "/placeholder.svg"}
//                       alt={comment.user.name}
//                       className="w-10 h-10 rounded-full object-cover border border-stone-600"
//                     />
//                     <div className="flex-1">
//                       <div className="flex justify-between items-center">
//                         <h4 className="font-medium text-white">{comment.user.name}</h4>
//                         <span className="text-xs text-stone-400">
//                           {new Date(comment.timestamp).toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}
//                         </span>
//                       </div>
//                       <p className="text-stone-200 text-sm mt-1">{comment.text}</p>
//                     </div>
//                   </motion.div>
//                 ))
//               )}
//             </div>
//             <div className="p-4 bg-stone-800 border-t border-stone-700">
//               <div className="flex space-x-2">
//                 <div className="flex-1 flex space-x-2">
//                   <input
//                     type="text"
//                     placeholder="Add a comment..."
//                     className="w-full px-4 py-3 bg-stone-700 border border-stone-600 rounded-full text-white placeholder-stone-400 focus:outline-none focus:ring-2 focus:ring-amber-500/50 focus:border-amber-500"
//                     value={newComment}
//                     onChange={(e) => setNewComment(e.target.value)}
//                     onKeyPress={(e) => e.key === "Enter" && handleAddComment()}
//                   />
//                   <button
//                     className="w-12 h-12 rounded-full bg-amber-500 flex items-center justify-center text-stone-900 disabled:opacity-50 disabled:bg-stone-700 disabled:text-stone-500 hover:bg-amber-400 transition-colors"
//                     onClick={handleAddComment}
//                     disabled={!newComment.trim()}
//                   >
//                     <Send size={18} />
//                   </button>
//                 </div>
//               </div>
//             </div>
//           </div>
//         </motion.div>
//       )}
//     </AnimatePresence>
//   )
// }

// const Feed = () => {
//   const navigate = useNavigate()
//   const { reelId } = useParams()
//   const [currentVideoIndex, setCurrentVideoIndex] = useState(0)
//   const [videos, setVideos] = useState([])
//   const [showProducts, setShowProducts] = useState(false)
//   const [showComments, setShowComments] = useState(false)
//   const [currentProducts, setCurrentProducts] = useState([])
//   const [selectedProduct, setSelectedProduct] = useState(null)
//   const [loading, setLoading] = useState(true)


//   const touchStartYRef = useRef(0); 
//   const touchEndYRef = useRef(0);      
//   const isScrollingRef = useRef(false); 
//   const swipeDirectionRef = useRef(1); 
//   const isSwipingRef = useRef(false);  
//   const preloadedVideosRef = useRef(new Map());


//   // Create a ref to control the active video's playback via keyboard events
//   const activeVideoRef = useRef(null)
//   // Enhanced touch and scroll tracking refs

//   const PRELOAD_COUNT = 10

//   // Ref to always have the latest videos array
//   const videosRef = useRef([])
//   useEffect(() => {
//     videosRef.current = videos
//   }, [videos])

//   // Variants for smooth video transition
//   const pageVariants = {
//     initial: (direction) => ({
//       y: direction > 0 ? "100%" : "-100%",
//       opacity: 0,
//     }),
//     in: {
//       y: 0,
//       opacity: 1,
//       transition: {
//         type: "spring",
//         stiffness: 300,
//         damping: 30,
//       },
//     },
//     out: (direction) => ({
//       y: direction > 0 ? "-100%" : "100%",
//       opacity: 0,
//       transition: {
//         duration: 0.3,
//       },
//     }),
//   }

//   // Preload videos function
//  // Modified preload function for Azure HLS
//  const preloadVideos = useCallback((startIndex) => {
//   const currentVideos = videosRef.current
//   const endIndex = Math.min(startIndex + PRELOAD_COUNT, currentVideos.length)
  
//   for (let i = startIndex + 1; i < endIndex; i++) {
//     const video = currentVideos[i]
//     if (!video || preloadedVideosRef.current.has(video._id)) continue
    
//     // Preload HLS manifest
//     fetch(video.hlsMasterPlaylistUrl)
//       .then(() => {
//         preloadedVideosRef.current.set(video._id, true)
//       })
//       .catch(console.error)
//   }
// }, [PRELOAD_COUNT])

//   // API call to fetch videos
//   const fetchProducts = async () => {
//     try {
//       const res = await axiosInstance.get(GET_ALL_SHOPPABLE_VIDEOS)
//       if (Array.isArray(res.data.data)) {
//         setVideos(res.data.data) // Directly use Azure URLs from response
//       }
//     } catch (error) {
//       console.error("Error fetching products:", error)
//       setVideos([])
//     } finally {
//       setLoading(false)
//     }
//   }

//   useEffect(() => {
//     fetchProducts()
//   }, [])

//   useEffect(() => {
//     preloadVideos(currentVideoIndex)
//   }, [currentVideoIndex, preloadVideos])

//   // Wrap navigateVideos in useCallback so it can be used in the keydown handler
//   const navigateVideos = useCallback(
//     (direction) => {
//       const currentVideos = videosRef.current
//       if (currentVideos.length === 0 || showProducts || showComments) return
//       if (isScrollingRef.current) return
//       isScrollingRef.current = true

//       setCurrentVideoIndex((prevIndex) => {
//         let newIndex
//         if (direction > 0) {
//           newIndex = (prevIndex + 1) % currentVideos.length
//         } else {
//           newIndex = prevIndex > 0 ? prevIndex - 1 : currentVideos.length - 1
//         }
//         preloadVideos(newIndex)
//         console.log("New Index", newIndex)
//         return newIndex
//       })

//       setTimeout(() => {
//         isScrollingRef.current = false
//       }, 500)
//     },
//     [showProducts, showComments, preloadVideos],
//   )

//   useEffect(() => {
//     const handleKeyDown = (e) => {
//       // Avoid interfering when typing or editing
//       const activeTag = document.activeElement.tagName
//       if (activeTag === "INPUT" || activeTag === "TEXTAREA" || document.activeElement.isContentEditable) {
//         return
//       }
//       if (e.code === "Space") {
//         if (activeVideoRef.current) {
//           if (activeVideoRef.current.paused) {
//             activeVideoRef.current.play()
//           } else {
//             activeVideoRef.current.pause()
//           }
//         }
//         e.preventDefault() // prevent page scrolling
//       } else if (e.key === "ArrowUp") {
//         // Set swipeDirectionRef to -1 when ArrowUp is pressed
//         swipeDirectionRef.current = -1
//         navigateVideos(-1)
//         e.preventDefault()
//       } else if (e.key === "ArrowDown") {
//         // Set swipeDirectionRef to 1 when ArrowDown is pressed
//         swipeDirectionRef.current = 1
//         navigateVideos(1)
//         e.preventDefault()
//       }
//     }

//     window.addEventListener("keydown", handleKeyDown)
//     return () => window.removeEventListener("keydown", handleKeyDown)
//   }, [navigateVideos])

//   const handleTouchStart = (event) => {
//     if (showProducts || showComments) return
//     touchStartYRef.current = event.touches[0].clientY
//     touchEndYRef.current = event.touches[0].clientY
//     isSwipingRef.current = false
//   }

//   const handleTouchMove = (event) => {
//     if (showProducts || showComments) return
//     if (isScrollingRef.current) return
//     touchEndYRef.current = event.touches[0].clientY
//     const deltaY = touchStartYRef.current - touchEndYRef.current
//     if (Math.abs(deltaY) > 10) {
//       isSwipingRef.current = true
//       event.preventDefault()
//     }
//   }

//   const handleTouchEnd = (event) => {
//     if (showProducts || showComments) return
//     const deltaY = touchStartYRef.current - touchEndYRef.current
//     const SWIPE_THRESHOLD = 50
//     if (isSwipingRef.current && Math.abs(deltaY) > SWIPE_THRESHOLD) {
//       const direction = deltaY > 0 ? 1 : -1
//       swipeDirectionRef.current = direction
//       navigateVideos(direction)
//     }
//     touchStartYRef.current = 0
//     touchEndYRef.current = 0
//     isSwipingRef.current = false
//   }

//   const handleWheel = (event) => {
//     if (showProducts || showComments) return
//     event.preventDefault()
//     if (isScrollingRef.current) return
//     const direction = event.deltaY > 0 ? 1 : -1
//     swipeDirectionRef.current = direction
//     navigateVideos(direction)
//   }

//   const handleLike = (videoId) => {
//     setVideos(
//       videos.map((video) =>
//         video._id === videoId ? { ...video, likes: video.likes + (video.liked ? -1 : 1), liked: !video.liked } : video,
//       ),
//     )
//   }

//   const handleViewProducts = (products) => {
//     setCurrentProducts(products)
//     setShowProducts(true)
//   }

//   const closeProductModal = () => {
//     setShowProducts(false)
//   }

//   const handleSelectProduct = (product) => {
//     setSelectedProduct(product)
//     navigate(`/product/${product._id || product.id}`)
//   }

//   // Add event listeners for touch events
//   useEffect(() => {
//     // Prevent touch events if a modal is open
//     const container = document.getElementById("reels-container")
//     if (container) {
//       // Use passive: false to allow preventDefault()
//       container.addEventListener("touchstart", handleTouchStart, { passive: false })
//       container.addEventListener("touchmove", handleTouchMove, { passive: false })
//       container.addEventListener("touchend", handleTouchEnd, { passive: false })
//     }

//     return () => {
//       if (container) {
//         container.removeEventListener("touchstart", handleTouchStart)
//         container.removeEventListener("touchmove", handleTouchMove)
//         container.removeEventListener("touchend", handleTouchEnd)
//       }
//     }
//   }, [])

//   // Update currentVideoIndex if reelId is provided
//   useEffect(() => {
//     if (reelId && videosRef.current.length > 0) {
//       const index = videosRef.current.findIndex((v) => v._id === reelId)
//       if (index >= 0) {
//         setCurrentVideoIndex(index)
//       }
//     }
//   }, [reelId, videos])

//   return (
//     <motion.div
//       className="h-screen flex justify-center items-center overflow-hidden relative bg-stone-950 font-display"
//       id="reels-container"
//     >
//       {/* Back button with improved styling */}
//       <div className="absolute top-5 left-5 z-50">
//         <button
//           onClick={() => navigate("/profile")}
//           className="md:flex hidden bg-stone-800/80 backdrop-blur-sm rounded-full py-2 px-4 items-center gap-1.5 text-white hover:bg-amber-500 hover:text-stone-900 transition-all duration-300 shadow-lg border border-stone-700/50"
//         >
//           <ChevronLeft className="w-4 h-4" />
//           <span className="hidden md:block text-sm font-medium">Back</span>
//         </button>
//       </div>
//       <AnimatePresence initial={false}>
//         <motion.div
//           key={currentVideoIndex}
//           variants={pageVariants}
//           initial="initial"
//           animate="in"
//           exit="out"
//           custom={swipeDirectionRef.current}
//           className="absolute inset-0"
//         >
//           {loading ? (
//             <div className="absolute inset-0 w-full h-full flex items-center justify-center bg-stone-900 z-20">
//               <div className="w-16 h-16 rounded-full border-4 border-amber-500 border-t-transparent animate-spin"></div>
//             </div>
//           ) : (
//             videos.length > 0 &&
//             videos[currentVideoIndex] && (
//               <ReelCard
//                 video={videos[currentVideoIndex]}
//                 isActive={true}
//                 onLike={handleLike}
//                 onViewProducts={handleViewProducts}
//                 currentProducts={currentProducts}
//                 closeProductModal={closeProductModal}
//                 selectedProduct={selectedProduct}
//                 onSelectProduct={handleSelectProduct}
//                 showProducts={showProducts}
//                 onWheel={handleWheel}
//               />
//             )
//           )}
//         </motion.div>
//       </AnimatePresence>
//     </motion.div>
//   )
// }

// export default Feed




const videoId = response.data?.data?._id;
          if (videoId) {
            const processVideoUrl = `http://localhost:7070/api/process/${videoId}`;
            try {
              console.log(`Attempting to call process URL: ${processVideoUrl}`);
              axios.post(processVideoUrl).then(processResponse => {
                if (processResponse.status === 202) {
                  toast.info("Video processing initiated.");
                  console.log("Process API Response:", processResponse.data);
                } else {
                  toast.warn(`Video processing initiation responded with: ${processResponse.status}`);
                }
              }).catch(procErr => {
                console.error("Async call to process video API failed:", procErr);
                toast.error(`Failed to trigger video processing step: ${procErr?.response?.data?.message || procErr.message}`);
              });
            } catch (processErrorSetup) {
              console.error("Error setting up async call to process video API:", processErrorSetup);
              toast.error(`Setup error for video processing: ${processErrorSetup.message}`);
            }
          } else {
            console.error("No _id found in the response to call the process API.");
            toast.warn("Video submitted, but could not get ID for processing step.");
          }


          {availableProducts.map((product) => (
                                <tr key={product._id} className="hover:bg-blue-50 transition-colors duration-200">
                                  <td className="px-6 py-1">
                                    <img
                                      src={product.images && product.images[0] && product.images[0].key ? `${cdnURL}${product.images[0].key}` : "/placeholder-image.png"}
                                      alt={product.title}
                                      className="w-12 h-12 object-cover rounded-lg shadow-md border border-gray-200"
                                    />
                                  </td>
                                  <td className="px-6 py-4">
                                    <div className="max-w-xs">
                                      <div className="font-semibold text-gray-900 text-base mb-1 truncate">
                                        {product.title}
                                      </div>
                                      <div className="text-sm text-gray-600 bg-gray-100 px-2 py-1 rounded-md inline-block">
                                        {product.category} • {product.subcategory}
                                      </div>
                                    </div>
                                  </td>
                                  <td className="px-6 py-4">
                                    <div className="space-y-1">
                                      <div className="font-bold text-green-600 text-lg">₹{product.productPrice}</div>
                                      <div className="text-xs text-gray-500 space-y-0.5">
                                        <div>Starting: ₹{product.startingPrice}</div>
                                        <div>Reserve: ₹{product.reservedPrice}</div>
                                      </div>
                                    </div>
                                  </td>
                                  <td className="px-6 py-4">
                                    <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-semibold bg-emerald-100 text-emerald-800">
                                      <div className="w-2 h-2 bg-emerald-500 rounded-full mr-2"></div>
                                      {product.quantity} units
                                    </div>
                                  </td>
                                  <td className="px-6 py-4">
                                    <button
                                      className="inline-flex items-center px-4 py-2 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-lg hover:from-blue-700 hover:to-blue-800 transition-all duration-200 shadow-md hover:shadow-lg font-medium"
                                      onClick={(e) => handleProductSelect(e, product._id)}
                                      disabled={isConfirming}
                                    >
                                      <PlusCircle size={18} className="mr-2" />
                                      Add to Selection
                                    </button>
                                  </td>
                                </tr>
                              ))}






                              import { useEffect, useRef, useState, useCallback } from "react";
                              import { MessageCircle, Volume2, ArrowLeft, LucideWallet } from "lucide-react";
                              import { X, Clock, Package, Gavel, Users } from "lucide-react"; // Removed Video, Camera, CameraOff, Mic, MicOff
                              import LikeButton from "./ui/LikeButton";
                              import { useNavigate, useParams, UNSAFE_NavigationContext } from "react-router-dom"; // Added UNSAFE_NavigationContext
                              import { socketurl } from "../../../config";
                              import axios from "axios";
                              import LiveComments from "./LiveComments";
                              import io from "socket.io-client";
                              import Auctions from "./Auctions";
                              import { generateSignedUrl } from "../../utils/aws";
                              import BuyProductsSellers from "./BuyProductsSeller";
                              import GiveAway from "./GiveAway";
                              // import { SOCKET_URL } from "../api/apiDetails"; // Not used, can be removed
                              import { BiNotepad } from "react-icons/bi";
                              import { FiShare } from "react-icons/fi";
                              import { AiOutlineShop } from "react-icons/ai";
                              import { useAuth } from "../../context/AuthContext";
                              import { toast } from "react-toastify";
                              import { AnimatePresence, motion } from "framer-motion";
                              import StartStream from "../reuse/LiveStream/StartStream";
                              import { useContext } from "react"; // Added useContext
                              
                              const socket = io.connect(socketurl, {
                                  transports: ['websocket'], // Force WebSocket transport
                              });
                              
                              const ShowDetailsSeller = () => {
                                  const { user } = useAuth();
                                  const navigate = useNavigate();
                                  const { showId } = useParams();
                                  const [show, setShow] = useState();
                                  const [liked, setLiked] = useState(false);
                                  const [likes, setLikes] = useState(0);
                                  const [userId] = useState(user?._id); // Changed to a constant as it's from context
                              
                              
                                  const [signedUrls, setSignedUrls] = useState({});
                                  const [products, setProducts] = useState([]);
                                  const [activeTab, setActiveTab] = useState("Auction");
                                  const [showMobileSidebar, setShowMobileSidebar] = useState(false);
                                  const [viewerCount, setViewerCount] = useState(0); // Keeping viewerCount, but it will be updated via socket
                              
                                  // State for navigation confirmation dialog
                                  const [showExitConfirm, setShowExitConfirm] = useState(false);
                                  const pendingNavigation = useRef(null); // Ref to store the blocked navigation
                              
                                  // Access the navigation context to block transitions
                                  const navigator = useContext(UNSAFE_NavigationContext).navigator;
                              
                                  // Fetch show data on component mount and when showMobileSidebar changes
                                  useEffect(() => {
                                      fetchShow();
                                  }, [showMobileSidebar, showId]); // Added showId to dependency array
                              
                                  // Update likes and liked status when show data changes
                                  useEffect(() => {
                                      if (show) {
                                          setLikes(show?.likes);
                                          setLiked(show?.likedBy?.includes(user?._id));
                                          setViewerCount(show?.viewerCount || 0);
                                      }
                                  }, [show, user?._id]);
                              
                                  const fetchShow = async () => {
                                      // setLoading(true); // Moved loading state into fetchShowData
                                      try {
                                          const response = await axios.get(`${socketurl}/api/shows/get/${showId}`, {
                                              withCredentials: true,
                                          });
                                          if (response.status === 200) {
                                              const showData = response.data;
                                              console.log("Fetched Show Data:", showData);
                                              setShow(showData);
                                              const allProducts = [
                                                  ...(showData?.buyNowProducts || []),
                                                  ...(showData?.auctionProducts || []),
                                                  ...(showData?.giveawayProducts || []),
                                              ];
                                              setProducts(allProducts);
                                          } else {
                                              console.error("Failed to fetch show details.");
                                          }
                                      } catch (error) {
                                          console.error("Error fetching show details:", error);
                                      } finally {
                                          // setLoading(false); // Moved loading state into fetchShowData
                                      }
                                  };
                              
                                  const handleLike = () => {
                                      if (!userId) {
                                          toast.error("Please log in to like a show.");
                                          return;
                                      }
                                      socket.emit("toggleLike", { streamId: showId, userId });
                                  };
                              
                                  useEffect(() => {
                                      if (socket && showId) {
                                          socket.emit("joinRoom", showId);
                              
                                          const handleLikesUpdate = ({ likes, likedBy }) => {
                                              setLikes(likes);
                                              setLiked(likedBy?.includes(userId));
                                          };
                              
                                          const handleViewerCountUpdate = (count) => {
                                              setViewerCount(count);
                                          };
                              
                                          socket.on(`likesUpdated-${showId}`, handleLikesUpdate);
                                          socket.on(`viewerCountUpdate-${showId}`, handleViewerCountUpdate); // Listen for viewer count updates
                              
                                          return () => {
                                              if (socket) {
                                                  socket.off(`likesUpdated-${showId}`, handleLikesUpdate);
                                                  socket.off(`viewerCountUpdate-${showId}`, handleViewerCountUpdate); // Clean up
                                                  socket.emit("leaveRoom", showId); // Emit leave room on unmount
                                              }
                                          };
                                      }
                                  }, [socket, showId, userId]);
                              
                                  // Handle stream timer (This part is still relevant for displaying the time, even if StartStream handles the actual logic)
                                  const [streamTime, setStreamTime] = useState(0); // Kept streamTime state
                                  const timerRef = useRef(null); // Kept timerRef
                              
                                  useEffect(() => {
                                      // Assuming StartStream component will emit an event when streaming starts/stops
                                      // For now, let's just keep the timer running if the 'show' object indicates it's live
                                      // You might need a more robust way to sync this with StartStream's actual streaming state.
                                      if (show?.isLive) { // Assuming `isLive` property on the show object
                                          timerRef.current = setInterval(() => {
                                              setStreamTime((prev) => prev + 1);
                                          }, 1000);
                                      } else {
                                          if (timerRef.current) {
                                              clearInterval(timerRef.current);
                                          }
                                          setStreamTime(0);
                                      }
                              
                                      return () => {
                                          if (timerRef.current) {
                                              clearInterval(timerRef.current);
                                          }
                                      };
                                  }, [show?.isLive]);
                              
                              
                                  const formatTime = (seconds) => {
                                      const hrs = Math.floor(seconds / 3600);
                                      const mins = Math.floor((seconds % 3600) / 60);
                                      const secs = seconds % 60;
                                      return `${hrs.toString().padStart(2, "0")}:${mins.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`;
                                  };
                              
                                  // Removed toggleCamera and toggleMic - StartStream handles this
                              
                                  // Removed fetchPublishingToken, startStreaming, stopStreaming - StartStream handles this
                              
                                  // Navigation confirmation logic
                                  useEffect(() => {
                                      if (show?.isLive) { // Only prompt if currently live
                                          const handleBlockedNavigation = (event) => {
                                              // If the user tries to navigate, prevent it and show the modal
                                              if (!showExitConfirm) { // Prevent showing multiple modals
                                                  event.preventDefault();
                                                  pendingNavigation.current = event.destination;
                                                  setShowExitConfirm(true);
                                              }
                                          };
                              
                                          // This relies on React Router's internal navigation blocking
                                          // This is an UNSAFE API and might change in future versions of React Router
                                          // A more robust solution for production would involve a custom navigation prompt hook.
                                          const unblock = navigator.block(handleBlockedNavigation);
                              
                                          return () => {
                                              unblock();
                                          };
                                      }
                                  }, [navigator, showExitConfirm, show?.isLive]);
                              
                                  const confirmExit = () => {
                                      setShowExitConfirm(false);
                                      if (pendingNavigation.current) {
                                          // Allow the navigation to proceed
                                          pendingNavigation.current.retry();
                                          pendingNavigation.current = null;
                                      }
                                  };
                              
                                  const cancelExit = () => {
                                      setShowExitConfirm(false);
                                      pendingNavigation.current = null; // Clear pending navigation
                                  };
                              
                              
                                  // Share handler for the show page
                                  const handleShare = async () => {
                                      const shareUrl = `${window.location.origin}/home/show/${showId}`;
                                      if (navigator.share) {
                                          try {
                                              await navigator.share({
                                                  title: show?.title || "Check out this show!",
                                                  text: "Hey, check out this live show on our platform!",
                                                  url: shareUrl,
                                              });
                                              console.log("Shared successfully");
                                          } catch (error) {
                                              console.error("Error sharing", error);
                                          }
                                      } else {
                                          navigator.clipboard
                                              .writeText(shareUrl)
                                              .then(() => {
                                                  toast.success("Link copied to clipboard!");
                                              })
                                              .catch((err) => console.error("Error copying link:", err));
                                      }
                                  };
                              
                              
                              useEffect(() => {
                                  const fetchSignedUrls = async () => {
                                      const urls = {}; 
                                      const cdnURL = import.meta.env.VITE_AWS_CDN_URL; 
                              
                                      for (const product of products) {
                                          if (product.productId.images && product.productId.images[0] && product.productId.images[0].key) {
                                              urls[product.productId._id] = cdnURL + product.productId.images[0].key;
                                          }
                                      }
                                      setSignedUrls(urls);
                                  };
                              
                                  if (products.length > 0) {
                                      fetchSignedUrls();
                                  }
                              }, [products]);
                              
                                  return (
                                      <div className="flex min-h-screen bg-stone-950 text-white font-montserrat">
                                          {/* Left Sidebar - Auction Details */}
                                          <div className="w-[25%] hidden lg:block border-r border-stone-800 bg-stone-950 text-white shadow-xl">
                                              <div className="p-6 space-y-6">
                                                  {/* Back Button */}
                                                  <button
                                                      onClick={() => navigate(`/seller/allshows`)}
                                                      className="flex items-center gap-2 px-4 py-2 rounded-full bg-stone-900 hover:bg-stone-800 transition-all duration-300 text-sm font-medium"
                                                  >
                                                      <ArrowLeft className="w-4 h-4" /> Back
                                                  </button>
                              
                                                  {/* Seller Info */}
                                                  {/* <div className="flex items-center space-x-3 p-4 bg-stone-900 rounded-2xl shadow-lg border border-stone-800">
                                                      <div className="avatar">
                                                          {show?.host?.userInfo?.profileURL ? (
                                                              <div className="w-12 h-12 rounded-full ring-2 ring-yellow-500/20 overflow-hidden">
                                                                  <img
                                                                      src={show?.host?.userInfo?.profileURL || "/placeholder.svg"}
                                                                      alt={show?.host?.userInfo?.userName || show?.host?.userInfo?.name}
                                                                      className="w-full h-full object-cover"
                                                                      onError={(e) => {
                                                                          e.target.parentElement.innerHTML = `<div class="w-12 h-12 bg-stone-800 text-yellow-500 rounded-full flex items-center justify-center">
                                                                              <span class="text-lg font-bold capitalize">${show?.host?.userInfo?.userName.charAt(0)}</span>
                                                                          </div>`;
                                                                      }}
                                                                  />
                                                              </div>
                                                          ) : (
                                                              <div className="bg-stone-800 text-yellow-500 rounded-full w-12 h-12 flex items-center justify-center ring-2 ring-yellow-500/20">
                                                                  <span className="text-lg font-bold capitalize">{show?.host?.userInfo?.userName?.charAt(0)}</span>
                                                              </div>
                                                          )}
                                                      </div>
                                                      <div>
                                                          <h2 className="font-semibold text-lg">{show?.host?.companyName || show?.host?.businessName}</h2>
                                                          <div className="flex items-center space-x-2 text-sm text-stone-400">
                                                              <span className="flex items-center gap-1">
                                                                  <span className="text-yellow-500">★</span> <span>5.0</span>
                                                              </span>
                                                              <span>•</span>
                                                              <button className="px-3 py-1 bg-yellow-400 text-stone-900 rounded-full text-xs font-bold hover:bg-yellow-500 transition-colors">
                                                                  Follow
                                                              </button>
                                                          </div>
                                                      </div>
                                                  </div> */}
                                              </div>
                              
                                              <div className="">
                                                  {/* Navigation Tabs */}
                                                  <div className="flex bg-stone-900 p-1.5 rounded-xl shadow-md border border-stone-800">
                                                      <button
                                                          className={`flex-1 py-1 px-2 rounded-lg text-sm font-medium transition-all ${activeTab === "Auction" ? "bg-yellow-400 text-stone-900 font-semibold" : "text-stone-300 hover:bg-stone-800"}`}
                                                          onClick={() => setActiveTab("Auction")}
                                                      >
                                                          Auction
                                                      </button>
                                                      <button
                                                          className={`flex-1 py-1 px-2 rounded-lg text-sm font-medium transition-all ${activeTab === "Buy Now" ? "bg-yellow-400 text-stone-900 font-semibold" : "text-stone-300 hover:bg-stone-800"}`}
                                                          onClick={() => setActiveTab("Buy Now")}
                                                      >
                                                          Buy Now
                                                      </button>
                                                      <button
                                                          className={`flex-1 py-1 px-2 rounded-lg text-sm font-medium transition-all ${activeTab === "Give away" ? "bg-yellow-400 text-stone-900 font-semibold" : "text-stone-300 hover:bg-stone-800"}`}
                                                          onClick={() => setActiveTab("Give away")}
                                                      >
                                                          Giveaway
                                                      </button>
                                                  </div>
                              
                                                  {/* Tab Content */}
                                                  <div
                                                      className="space-y-4 overflow-y-auto pr-2"
                                                      style={{ maxHeight: "calc(100vh - 320px)", scrollbarWidth: "thin" }}
                                                  >
                                                      {activeTab === "Auction" && (
                                                          <div className="space-y-4">
                                                              {show?.auctionProducts?.length ? (
                                                                  show?.auctionProducts?.map((taggedProduct) => (
                                                                      <div
                                                                          key={taggedProduct._id}
                                                                          className="overflow-hidden"
                                                                      >
                                                                          <Auctions showId={showId} streamId={showId} product={taggedProduct} signedUrls={signedUrls} />
                                                                      </div>
                                                                  ))
                                                              ) : (
                                                                  <div className="text-center py-8 text-stone-400">
                                                                      <Gavel className="w-12 h-12 mx-auto mb-3 opacity-50" />
                                                                      <p>No auction products available</p>
                                                                  </div>
                                                              )}
                                                          </div>
                                                      )}
                                                      {activeTab === "Buy Now" && (
                                                          <div className="space-y-4">
                                                              {show?.buyNowProducts?.length ? (
                                                                  show?.buyNowProducts?.map((taggedProduct) => (
                                                                      <div
                                                                          key={taggedProduct._id}
                                                                          className="overflow-hidden"
                                                                      >
                                                                          <BuyProductsSellers
                                                                              showId={showId}
                                                                              streamId={showId}
                                                                              product={taggedProduct}
                                                                              signedUrls={signedUrls}
                                                                          />
                                                                      </div>
                                                                  ))
                                                              ) : (
                                                                  <div className="text-center py-8 text-stone-400">
                                                                      <Package className="w-12 h-12 mx-auto mb-3 opacity-50" />
                                                                      <p>No buy now products available</p>
                                                                  </div>
                                                              )}
                                                          </div>
                                                      )}
                                                      {activeTab === "Give away" && (
                                                          <div className="space-y-4">
                                                              {show?.giveawayProducts?.length ? (
                                                                  show?.giveawayProducts?.map((taggedProduct) => (
                                                                      <div
                                                                          key={taggedProduct._id}
                                                                          className="overflow-hidden"
                                                                      >
                                                                          <GiveAway streamId={showId} product={taggedProduct} signedUrls={signedUrls} />
                                                                      </div>
                                                                  ))
                                                              ) : (
                                                                  <div className="text-center py-8 text-stone-400">
                                                                      <Package className="w-12 h-12 mx-auto mb-3 opacity-50" />
                                                                      <p>No giveaway products available</p>
                                                                  </div>
                                                              )}
                                                          </div>
                                                      )}
                                                  </div>
                                              </div>
                                          </div>
                              
                                          {/* Mobile Sidebar for Auction Details */}
                                          <AnimatePresence>
                                              {showMobileSidebar && (
                                                  <motion.div
                                                      className="fixed inset-0 z-50 flex lg:hidden"
                                                      initial={{ opacity: 0 }}
                                                      animate={{ opacity: 1 }}
                                                      exit={{ opacity: 0 }}
                                                      transition={{ duration: 0.3 }}
                                                  >
                                                      {/* Overlay */}
                                                      <motion.div
                                                          className="fixed inset-0 bg-black"
                                                          onClick={() => setShowMobileSidebar(false)}
                                                          initial={{ opacity: 0 }}
                                                          animate={{ opacity: 0.7 }}
                                                          exit={{ opacity: 0 }}
                                                          transition={{ duration: 0.3 }}
                                                      ></motion.div>
                              
                                                      {/* Sidebar */}
                                                      <motion.div
                                                          className="relative w-full max-w-sm bg-stone-950 p-6 space-y-6 border-r border-stone-800 shadow-xl overflow-y-auto"
                                                          initial={{ x: "-100%" }}
                                                          animate={{ x: 0 }}
                                                          exit={{ x: "-100%" }}
                                                          transition={{ duration: 0.3, ease: "easeInOut" }}
                                                      >
                                                          <div className="flex justify-between items-center">
                                                              <button
                                                                  onClick={() => navigate(`/seller/allshows`)}
                                                                  className="flex items-center gap-2 px-4 py-2 rounded-full bg-stone-900 hover:bg-stone-800 transition-all duration-300 text-sm font-medium"
                                                              >
                                                                  <ArrowLeft className="w-4 h-4" /> Back
                                                              </button>
                                                              <button
                                                                  onClick={() => setShowMobileSidebar(false)}
                                                                  className="p-2 rounded-full bg-stone-800 text-stone-400 hover:bg-stone-700"
                                                              >
                                                                  <X size={20} />
                                                              </button>
                                                          </div>
                              
                                                          {/* Seller Info */}
                                                          <div className="flex items-center space-x-3 p-4 bg-stone-900 rounded-2xl shadow-lg border border-stone-800">
                                                              <div className="avatar">
                                                                  {show?.host?.userInfo?.profileURL ? (
                                                                      <div className="w-12 h-12 rounded-full ring-2 ring-yellow-500/20 overflow-hidden">
                                                                          <img
                                                                              src={show?.host?.userInfo?.profileURL || "/placeholder.svg"}
                                                                              alt={show?.host?.userInfo?.userName || show?.host?.userInfo?.name}
                                                                              className="w-full h-full object-cover"
                                                                              onError={(e) => {
                                                                                  e.target.parentElement.innerHTML = `<div class="w-12 h-12 bg-stone-800 text-yellow-500 rounded-full flex items-center justify-center">
                                                                                      <span class="text-lg font-bold capitalize">${show?.host?.userInfo?.userName.charAt(0)}</span>
                                                                                  </div>`;
                                                                              }}
                                                                          />
                                                                      </div>
                                                                  ) : (
                                                                      <div className="bg-stone-800 text-yellow-500 rounded-full w-12 h-12 flex items-center justify-center ring-2 ring-yellow-500/20">
                                                                          <span className="text-lg font-bold capitalize">
                                                                              {show?.host?.userInfo?.userName?.charAt(0)}
                                                                          </span>
                                                                      </div>
                                                                  )}
                                                              </div>
                                                              <div>
                                                                  <h2 className="font-semibold text-lg">{show?.host?.companyName || show?.host?.businessName}</h2>
                                                                  <div className="flex items-center space-x-2 text-sm text-stone-400">
                                                                      <span className="flex items-center gap-1">
                                                                          <span className="text-yellow-500">★</span> <span>5.0</span>
                                                                      </span>
                                                                      <span>•</span>
                                                                      <button className="px-3 py-1 bg-yellow-400 text-stone-900 rounded-full text-xs font-bold hover:bg-yellow-500 transition-colors">
                                                                          Follow
                                                                      </button>
                                                                  </div>
                                                              </div>
                                                          </div>
                              
                                                          {/* Navigation Tabs */}
                                                          <div className="flex bg-stone-900 p-1.5 rounded-xl shadow-md border border-stone-800">
                                                              <button
                                                                  className={`flex-1 py-2.5 px-4 rounded-lg text-sm font-medium transition-all ${activeTab === "Auction" ? "bg-yellow-400 text-stone-900 font-semibold" : "text-stone-300 hover:bg-stone-800"}`}
                                                                  onClick={() => setActiveTab("Auction")}
                                                              >
                                                                  Auction
                                                              </button>
                                                              <button
                                                                  className={`flex-1 py-2.5 px-4 rounded-lg text-sm font-medium transition-all ${activeTab === "Buy Now" ? "bg-yellow-400 text-stone-900 font-semibold" : "text-stone-300 hover:bg-stone-800"}`}
                                                                  onClick={() => setActiveTab("Buy Now")}
                                                              >
                                                                  Buy Now
                                                              </button>
                                                              <button
                                                                  className={`flex-1 py-2.5 px-4 rounded-lg text-sm font-medium transition-all ${activeTab === "Give away" ? "bg-yellow-400 text-stone-900 font-semibold" : "text-stone-300 hover:bg-stone-800"}`}
                                                                  onClick={() => setActiveTab("Give away")}
                                                              >
                                                                  Giveaway
                                                              </button>
                                                          </div>
                              
                                                          {/* Tab Content */}
                                                          <div
                                                              className="space-y-4 overflow-y-auto pr-2"
                                                              style={{ maxHeight: "calc(100vh - 320px)", scrollbarWidth: "thin" }}
                                                          >
                                                              {activeTab === "Auction" && (
                                                                  <div className="space-y-4">
                                                                      {show?.auctionProducts?.length ? (
                                                                          show?.auctionProducts?.map((taggedProduct) => (
                                                                              <div
                                                                                  key={taggedProduct._id}
                                                                                  className="overflow-hidden"
                                                                              >
                                                                                  <Auctions showId={showId} streamId={showId} product={taggedProduct} signedUrls={signedUrls} />
                                                                              </div>
                                                                          ))
                                                                      ) : (
                                                                          <div className="text-center py-8 text-stone-400">
                                                                              <Gavel className="w-12 h-12 mx-auto mb-3 opacity-50" />
                                                                              <p>No auction products available</p>
                                                                          </div>
                                                                      )}
                                                                  </div>
                                                              )}
                                                              {activeTab === "Buy Now" && (
                                                                  <div className="space-y-4">
                                                                      {show?.buyNowProducts?.length ? (
                                                                          show?.buyNowProducts?.map((taggedProduct) => (
                                                                              <div
                                                                                  key={taggedProduct._id}
                                                                                  className="overflow-hidden"
                                                                              >
                                                                                  <BuyProductsSellers
                                                                                      showId={showId}
                                                                                      streamId={showId}
                                                                                      product={taggedProduct}
                                                                                      signedUrls={signedUrls}
                                                                                  />
                                                                              </div>
                                                                          ))
                                                                      ) : (
                                                                          <div className="text-center py-8 text-stone-400">
                                                                              <Package className="w-12 h-12 mx-auto mb-3 opacity-50" />
                                                                              <p>No buy now products available</p>
                                                                          </div>
                                                                      )}
                                                                  </div>
                                                              )}
                                                              {activeTab === "Give away" && (
                                                                  <div className="space-y-4">
                                                                      {show?.giveawayProducts?.length ? (
                                                                          show?.giveawayProducts?.map((taggedProduct) => (
                                                                              <div
                                                                                  key={taggedProduct._id}
                                                                                  className="overflow-hidden"
                                                                              >
                                                                                  <GiveAway streamId={showId} product={taggedProduct} signedUrls={signedUrls} />
                                                                              </div>
                                                                          ))
                                                                      ) : (
                                                                          <div className="text-center py-8 text-stone-400">
                                                                              <Package className="w-12 h-12 mx-auto mb-3 opacity-50" />
                                                                              <p>No giveaway products available</p>
                                                                          </div>
                                                                      )}
                                                                  </div>
                                                              )}
                                                          </div>
                                                      </motion.div>
                                                  </motion.div>
                                              )}
                                          </AnimatePresence>
                              
                                          {/* Center - Live Stream */}
                                          <div className="flex-1 flex flex-col min-h-screen items-center relative">
                                              <div className="w-full max-w-[500px] h-screen aspect-[9/22] bg-stone-900 relative shadow-xl rounded-xl overflow-hidden">
                                                  <div className="relative bg-black w-full h-full">
                                                      {/* StartStream component handles the actual video and streaming logic */}
                                                      <StartStream showId={showId} showDetails={show} />
                              
                                                    
                                                  </div>
                              
                                                  <div className="absolute top-12 left-4 right-16 p-4">
                                                      <h1 className="text-xl font-bold text-white">{show?.title || "Untitled Stream"}</h1>
                                                      {/* <div className="flex items-center space-x-2 text-sm text-stone-300 mt-1">
                                                          <span className="flex items-center gap-1">
                                                              <Users className="w-4 h-4 text-yellow-500" /> {viewerCount || 0} watching
                                                          </span>
                                                          <span>•</span>
                                                          <span>{show?.category || "General"}</span>
                                                      </div> */}
                                                  </div>
                              
                                                  {/* Floating Action Buttons */}
                                                  <div className="absolute right-4 bottom-28 flex flex-col space-y-3">
                                                      <LikeButton
                                                          initialLikes={likes}
                                                          onLike={handleLike}
                                                          isLiked={liked}
                                                          setIsLiked={setLiked}
                                                          setLikes={setLikes}
                                                          connectionReady={!!socket}
                                                      />
                              
                                                      <button className="w-10 h-10 flex items-center justify-center rounded-full bg-stone-800/80 backdrop-blur-sm border border-stone-700/30 text-white hover:bg-stone-700 transition-colors shadow-lg">
                                                          <BiNotepad className="h-5 w-5" />
                                                      </button>
                              
                                                      <button
                                                          onClick={handleShare}
                                                          className="w-10 h-10 flex items-center justify-center rounded-full bg-stone-800/80 backdrop-blur-sm border border-stone-700/30 text-white hover:bg-stone-700 transition-colors shadow-lg"
                                                      >
                                                          <FiShare className="h-5 w-5" />
                                                      </button>
                              
                                                      <button className="w-10 h-10 flex items-center justify-center rounded-full bg-stone-800/80 backdrop-blur-sm border border-stone-700/30 text-white hover:bg-stone-700 transition-colors shadow-lg">
                                                          <Volume2 className="h-5 w-5" />
                                                      </button>
                              
                                                      <button className="w-10 h-10 flex items-center justify-center rounded-full bg-stone-800/80 backdrop-blur-sm border border-stone-700/30 text-white hover:bg-stone-700 transition-colors shadow-lg">
                                                          <LucideWallet className="h-5 w-5" />
                                                      </button>
                              
                                                      {/* Mobile Toggle Button for Auction Details */}
                                                      <button
                                                          onClick={() => setShowMobileSidebar(true)}
                                                          className="relative lg:hidden w-10 h-10 flex items-center justify-center rounded-full bg-yellow-400 text-stone-900 hover:bg-yellow-500 transition-colors shadow-lg"
                                                      >
                                                          <AiOutlineShop className="w-5 h-5" />
                                                          <span className="absolute -top-1 -right-1 flex h-5 w-5 items-center justify-center rounded-full bg-red-600 text-xs font-bold text-white border-2 border-stone-900">
                                                              {(show?.auctionProducts?.length || 0) +
                                                                  (show?.buyNowProducts?.length || 0) +
                                                                  (show?.giveawayProducts?.length || 0)}
                                                          </span>
                                                      </button>
                                                  </div>
                              
                                                  {/* Overlay Chat/Comments */}
                                                  <div className="absolute bottom-5 left-1 right-16 text-white flex flex-col">
                                                      <LiveComments streamId={showId} prevComments={show?.comments} />
                                                  </div>
                                              </div>
                                          </div>
                              
                                          {/* Right Sidebar - Chat and Stream Controls (Simplified) */}
                                          <div className="w-[25%] hidden lg:flex flex-col justify-between border-l border-stone-800 min-h-screen bg-stone-950">
                                              {/* Stream Controls - Now handled by StartStream, but you might want to show some info here */}
                                              <div className="p-6 border-b border-stone-800 text-center flex flex-col gap-4">
                                                  <h3 className="text-xl font-bold text-white">Stream Status</h3>
                                                  <div className="flex justify-between items-center mt-2 p-3 bg-stone-900 rounded-lg border border-stone-800">
                                                      <div className="flex items-center gap-2">
                                                          <Clock className="w-4 h-4 text-yellow-500" />
                                                          <span className="font-mono">{formatTime(streamTime)}</span>
                                                      </div>
                                                      <div className="flex items-center gap-2">
                                                          <Users className="w-4 h-4 text-yellow-500" />
                                                          <span>{viewerCount || 0}</span>
                                                      </div>
                                                  </div>
                                                  {/* You might want to add a button here to explicitly stop the stream if it's Live
                                                      This would need to interact with the StartStream component's internal state or expose a stop function.
                                                      For now, the navigation prompt covers exiting.
                                                  */}
                                              </div>
                              
                                              <div className="flex-1 flex flex-col text-white">
                                                  <div className="p-4 border-b border-stone-800 flex items-center justify-between">
                                                      <h3 className="font-semibold text-lg">Live Chat</h3>
                                                      <MessageCircle className="h-5 w-5 text-yellow-500" />
                                                  </div>
                                                  <LiveComments
                                                      streamId={showId}
                                                      prevComments={show?.comments}
                                                      height={show?.comments?.length > 10 ? "70vh" : "32vh"}
                                                  />
                                              </div>
                                          </div>
                              
                                          {/* Exit Confirmation Modal */}
                                          <AnimatePresence>
                                              {showExitConfirm && (
                                                  <motion.div
                                                      className="fixed inset-0 z-50 flex items-center justify-center p-4"
                                                      initial={{ opacity: 0 }}
                                                      animate={{ opacity: 1 }}
                                                      exit={{ opacity: 0 }}
                                                      transition={{ duration: 0.3 }}
                                                  >
                                                      <motion.div
                                                          className="fixed inset-0 bg-black/70 backdrop-blur-sm"
                                                          onClick={cancelExit}
                                                      ></motion.div>
                                                      <motion.div
                                                          className="relative bg-stone-900 p-8 rounded-2xl shadow-2xl max-w-md w-full text-center border border-stone-700"
                                                          initial={{ scale: 0.8, opacity: 0 }}
                                                          animate={{ scale: 1, opacity: 1 }}
                                                          exit={{ scale: 0.8, opacity: 0 }}
                                                          transition={{ duration: 0.2 }}
                                                      >
                                                          <h2 className="text-2xl font-bold text-white mb-4">Exit Live Stream?</h2>
                                                          <p className="text-stone-300 mb-6">
                                                              Are you sure you want to exit the live stream? Your stream will end.
                                                          </p>
                                                          <div className="flex justify-center gap-4">
                                                              <button
                                                                  onClick={confirmExit}
                                                                  className="px-6 py-3 bg-red-600 text-white rounded-lg font-semibold hover:bg-red-700 transition-colors shadow-md"
                                                              >
                                                                  Yes, End Stream
                                                              </button>
                                                              <button
                                                                  onClick={cancelExit}
                                                                  className="px-6 py-3 bg-stone-700 text-white rounded-lg font-semibold hover:bg-stone-600 transition-colors shadow-md"
                                                              >
                                                                  No, Stay Live
                                                              </button>
                                                          </div>
                                                      </motion.div>
                                                  </motion.div>
                                              )}
                                          </AnimatePresence>
                                      </div>
                                  );
                              };
                              
                              export default ShowDetailsSeller;